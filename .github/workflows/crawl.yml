# GitHub Actions workflow 이름
name: Crawl_scheduler CI

# Workflow 실행조건
on:
  push:
    branches: ["main"]

# fastapi.yml (Django CI)workflow 에서 실행할 Job(작업) 정의
jobs:
  # job 1(build) -> job 2(run)

  build: # job 1
    # job 실행 환경 (최신 ubuntu)
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 4 # 동시 실행될 최대 Job 수
      matrix: # 각 Job에 전달될 매트릭스 변수 설정
        python-version: [3.12]

    steps:
      # Job 수행 단계별 작업
      # actions/checkout 액션 사용(GitHub제공), 소스코드 체크아웃(@v3 == 액션 버전)
      - uses: actions/checkout@v3

      # Python 버전 설정 step
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Hub 로그인 step
      - name: Login docker hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # docker/login-action 사용(GitHub제공) 도커허브 로그인
        # github actions secrets 민감정보 사용

      #    # Docker Hub 퍼블리시 step
      #    - name: Publish to docker hub
      #      run: docker push hwanju1596/kingwangjjang-be:0.0.1
      #
      #
      - name: Build and push crawl_scheduler
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/crawl_scheduler:0.0.1
          platforms: |
            linux/arm64
            linux/amd64

  run: # job 2
    # WAS 인스턴스에 접속, Docker 이미지 pull, run하는 Job
    needs: build # build job이 성공적으로 실행되야 실행
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v3
      - name: Create .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "ROOT=${{secrets.ROOT}}" >> .env

      # Was 인스턴스에 github secrets 변수 값들을 .env 파일에 복사해서 was 인스턴스에 업로드
      # .env 파일에 데이터를 넣어야하는데 그 데이터는 github secrets에 있음
      # scp-action 사용해서 was 인스턴스에 업로드
      - name: Upload secrets,docker-compose to WAS instance
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.WAS_HOST }}
          username: ${{ secrets.WAS_USERNAME }}
          port: ${{ secrets.WAS_SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: ".env,docker-compose.yml"
          target: "/home/ubuntu/kingwangjjang/crawl/"
          overwrite: true

      # WAS 인스턴스 접속 & 애플리케이션 실행 step
      - name: Connect to WAS & Execute Application
        uses: appleboy/ssh-action@master # GitHub제공 액션 사용, ssh로 인스턴스 접속
        with:
          host: ${{ secrets.WAS_HOST }}
          username: ${{ secrets.WAS_USERNAME }}
          key: ${{secrets.SSH_KEY}}
          port: ${{ secrets.WAS_SSH_PORT }}
          script: | # 인스턴스 접속후 실행할 스크립트
            sudo docker version
            cd kingwangjjang/crawl
            sudo docker-compose down
            sudo docker rmi hwanju1596/crawl_scheduler:0.0.1 -f
            sudo docker-compose up -d
      # sudo docker network connect kingwangjjang-network kingwangjjang_kingwangjjang-api-gateway_1
